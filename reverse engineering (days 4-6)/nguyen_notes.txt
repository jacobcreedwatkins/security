Reverse Engineering WOrkflow
x86 Student Guide
Memory Diagram
Stack Practice
The Stack

Programs
C+
High Level Language

C+ Code > Compile > Program.exe
Program.exe > Decompiler > Low Level Language (Assembly)

Instruction Operand1,Operand2

Register
16 General Registers
Stack Pointer
Base Pointer
Registers can store values 

Hex Value
Memory Address


Flags Register:
https://en.wikipedia.org/wiki/FLAGS_register


Assembly Syntax
Instruction Operand1
Instruction Operand1, Operand2

Operand:
Hex Value | 0x3
Register | eax
Memory Address | 0x00000001

Instruction:

Data Movement/Storage
MOV
LEA

Arithmetic
ADD
SUB
INC
DEC
MUL
DIV

Logic
OR
AND
XOR
SHR
SHL

Stack
PUSH
POP
CALL
RET

Control Flow
TEST
CMP
JMP	#Unconditional Jump
JLE #Conditional Jump, Jump if less than or equal to


Instruction Operand1
mov <dst>,<src>
mov eax,100		| eax=100
mov ebx,200		| eax=100,ebx=200
mov eax,200		| eax=200,ebx=200
mov eax,300		| eax=300,ebx=200
mov eax,ebx		| eax=200,ebx=200

add <dst>,<src>
add eax,30		| eax=230,ebx=200
sub ebx,60		| eax=230,ebx=140
inc eax			| eax=231,ebx=140
dec ebx			| eax=231,ebx=139


sub vs cmp



cmp operand1 - operand2
cmp eax,231	
cmp eax - 231	| eax=231,ebx=139
cmp 231-231=0	| flags register : zero flag : 

flags register
zero flag (0)= 0
sign flag (negative) = 0
carry flag (too small or large) = 1

jle	0x00000001


eax = 11
cmp eax,10
cmp 11-10 = 1

Flags Register
Zero Flag (0): 0
Carry Flag (int): 1
Sign Flag (neg): 0

je 0x00000001

je = Jump if equal

jl = Jump if less
jle = Jump if less than or equal to
jg = Jump if greater 
jge = Jump if greater than or equal to
je = Jump if equal


main:
  mov rax, 16 	|rax=16
  push rax 		|rax=16 | stack=16
  jmp mem2 
mem1: 
  mov rax, 0 	|rax=0,r8=16
  ret (returns the value of the first return register, rax) 0
mem2: 
  pop r8 		|rax=16,r8=16
  cmp rax, r8
		16-16=0 
		Flag Register:Zero Flag:1
  je mem1		|rax=16,r8=16
  
  
main:
  mov rcx, 25 	|rcx=25
  mov rbx, 62 	|rcx=25,rbx=62
  jmp mem1 		|Unconditional Jump
mem1: 
  sub rbx, 40 	|rcx=25,rbx=22
  mov rsi, rbx 	|rcx=25,rbx=22,rsi=22
  cmp rcx, rsi 	|rcx=25,rbx=22,rsi=22
  
  rcx - rsi
  25 - 22 = 3
  Flags Register:
	Zero Flag: 0
	Carry Flag: 1
	Sign Flag: 0

  jle mem2 
  
mem2: 
  mov rax, 0 
  ret 



main():
entry point and start of the program.

printf():
sends formatted output to stdout.

%d = Signed decimal integer
%f = Decimal floating point
%s = Strings

fgets():
reads a line from the specified stream and stores it into the string pointed to by str.

char *fgets(char *str, int n, FILE *stream)

strcmp():
compares str1 and str2

fp = fileopen("file.txt","r")
fgets(str,50,fp)

fgets(num1,5,stdin);


atoi():
ascii to interger


strtok():
stuff = "This is an example!"

strtok(stuff)
This
is
an
example

scanf()
Reads from stdin

Download:
-Windows and Linux Ops Station
-SCP, Python3 HTTP Server, Download manually on both workstations

Demo1.c
Demo1.exe
Demo2.c
Demo2.exe
